name: Release Workflow with pack squash

# Controls when the workflow will run
on:
  #  # Triggers the workflow on push or pull request events but only for the "master" branch
  #  push:
  #    branches: [ "master" ]
  #  pull_request:
  #    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  packsquash:
    name: Optimize resource pack
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Settup Discord Webhook
        id: webhook
        run: echo "WEBHOOK=${{secrets.WEBHOOK}}" >> $GITHUB_ENV

      - name: Delete unused sound
        run: rm -rf **/hocy.ogg
      
      - name: Get current date
        id: tag
        run: echo "tag=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

      - name: Set release name
        run: echo "RELEASE_NAME=HBCubemonde_${{env.date}}" >> $GITHUB_ENV

      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # A non-shallow repository clone is required
      - name: Run PackSquash
        uses: ComunidadAylas/PackSquash-action@v4
        with:
          packsquash_version: latest
          options: |
            # Optimize the pack in the root repository directory.
            # This is the default value for pack_directory when no PackSquash options are defined
            pack_directory = '.'

            # Set a custom output file path to work with the generated ZIP file
            # without needing to download its artifact in a separate step
            output_file_path = "/tmp/${{env.RELEASE_NAME}}.zip"
            
            allow_mods = ['OptiFine']
            
            # prettify shaders
            ['**/*?.{fsh,vsh,glsl}']
            shader_source_transformation_strategy = 'keep_as_is'
            
      - name: Tag and create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{env.date}}
          name: ${{env.RELEASE_NAME}}
          files: /tmp/${{env.RELEASE_NAME}}.zip
      
      - name: Get Current Release
        id: get_current_release
        uses: joutvhu/get-release@v1
        with:
          latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: curl samère for download URL
        id: curl
        run: |
          response=$(curl -s "${{ steps.get_current_release.outputs.assets_url }}" | grep browser_download_url | cut -d '"' -f 4)         
          echo "pack_url=$response" >> $GITHUB_OUTPUT
      
      - name: Set random responses
        id: responses
        run: |
          array[0]='Hello all ! This is you local ✨***Drak***✨ and this is your pack release !!'
          array[1]='Hey hey hey everybody ! Time for another release !!'
          array[2]='You wanna be a [[BIG SHOT]]? Just use this new release!'
          array[3]='Wake up samourai! A new release has come!'
          array[4]="Heyooo! I'm Dakal and i've made a brand new release!"
          array[5]='✨Heyyyy!✨ There is a new release on the resource pack repository!'
          array[6]="I don't know what to talk about now, maybe i'm burn-out from all of this, eh.. I just have to keep going. Here, your release."
          array[7]="HELLO EVERYONE o/ \nIM DAKAL AND HERE IS *MY* RELEASE"
          sizeArray=${#array[@]}
          indexArray=$(($RANDOM % $sizeArray))
          echo "message=${array[$indexArray]}" >> $GITHUB_OUTPUT
          
          images[0]='https://i.imgur.com/o03RC0w.png'
          images[1]='https://i.imgur.com/VVO51gG.png'
          images[2]='https://i.imgur.com/dApkCCw.png'
          images[3]='https://i.imgur.com/uzSm9Wv.png'
          sizeImages=${#images[@]}
          indexImages=$(($RANDOM % $sizeImages))
          echo "images=${images[$indexImages]}" >> $GITHUB_OUTPUT
          
          role="<@&1381969147176423525>"
          echo "role=$role" >> $GITHUB_OUTPUT
          
          usage='Run the `/pack set global ${{ steps.curl.outputs.pack_url }}` command to update it !'
          echo "usage=$usage" >> $GITHUB_OUTPUT
      

      #- name: Get download URL
      #  id: test
      #  run: TEST = curl -s "${{ steps.get_current_release.outputs.assets_url }}" | grep browser_download_url | cut -d '"' -f 4 >>
          
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ env.WEBHOOK }}
          DISCORD_USERNAME: "Dakal Itorasch"
          DISCORD_AVATAR: ${{ steps.responses.outputs.images }}
        uses: Ilshidur/action-discord@master
        with:
          args: "${{ steps.responses.outputs.role }} ${{ steps.responses.outputs.message }} \n ${{ steps.curl.outputs.pack_url }}\n\n ${{ steps.responses.outputs.usage }}"
          
